extern "C"
{
#include "raylib.h"
#include "raymath.h"
}

#include "motion.hpp"
#include "character.hpp"
#include "curve.hpp"
#include "database.hpp"
#include "ik.hpp"
#include "motion.hpp"
#include "nnet.hpp"
#include "renderer.hpp"
#include "robot.hpp"

enum
{
    GAMEPAD_PLAYER = 0,
};

enum
{
    GAMEPAD_STICK_LEFT,
    GAMEPAD_STICK_RIGHT,
};

vec3 gamepad_get_stick(int stick, const float deadzone = 0.2f)
{
    float gamepadx = GetGamepadAxisMovement(GAMEPAD_PLAYER, stick == GAMEPAD_STICK_LEFT ? GAMEPAD_AXIS_LEFT_X : GAMEPAD_AXIS_RIGHT_X);
    float gamepady = GetGamepadAxisMovement(GAMEPAD_PLAYER, stick == GAMEPAD_STICK_LEFT ? GAMEPAD_AXIS_LEFT_Y : GAMEPAD_AXIS_RIGHT_Y);
    float gamepadmag = sqrtf(gamepadx * gamepadx + gamepady * gamepady);
    
    if (gamepadmag > deadzone)
    {
        float gamepaddirx = gamepadx / gamepadmag;
        float gamepaddiry = gamepady / gamepadmag;
        float gamepadclippedmag = gamepadmag > 1.0f ? 1.0f : gamepadmag * gamepadmag;
        gamepadx = gamepaddirx * gamepadclippedmag;
        gamepady = gamepaddiry * gamepadclippedmag;
    }
    else
    {
        gamepadx = 0.0f;
        gamepady = 0.0f;
    }
    
    return vec3(gamepadx, 0.0f, gamepady);
}

int main(int argc, char** argv)
{
    InitWindow(720, 720, "raylib [background]");
    SetTargetFPS(60);
    //相机
    MooCamera camera(1, 0.1f, 0.1f, 0.05f, 50.f, vec3(0.f, 1.3f, 12.f), mat3());
    camera.set_view(vec3(0.f, 0.f, -1.f));
    camera.update_orientation(vec3(0.f, 1.f, 0.f));
    //控制器
    Camera_Controller camera_controller;
    bind_controller(camera_controller, &camera.position, &camera.direction);
    //点光源
    Point_Light light(vec3(0.f, 1.f, 1.5f), vec3(0.f, 0.f, -1.f), vec3(20.f));
    //对角色数据的拷贝
    MooMesh mesh1 = cube();
    MooMesh mesh2 = cube();
    //材质
    MooMaterial material1(PBR);
    material1.roughness = 0.1f;
    material1.tex = img_to_tex("../resources/skybox.png");
    material1.BRDFLut = img_to_tex("../resources/BRDFLut.png");
    material1.EavgLut = img_to_tex("../resources/EavgLut.png");
    //model存储mesh的拷贝，但由于mesh本身存储的是地址，实际上仍为mesh地址上的数据
    MooModel model0 = get_light_model(light);
    MooModel model1 = mesh_material_to_model(mesh1, material1);
    MooModel model2 = mesh_material_to_model(mesh2, material1);
    //更新信息
    updated_paramters par;
    par.light_dir = &light.light_direction;
    par.light_pos = &light.light_position;
    par.light_radiance = &light.light_radiance;
    par.shadow_map = light.shadow_map;
    //渲染器
    MooRenderer renderer;

    renderer.models.push_back(&model0);
    renderer.models.push_back(&model1);
    renderer.models.push_back(&model2);
    renderer.point_lights.push_back(&light);

    FBO output0(720, 720);

    int key = 0;
    int frame_num = 0;
    int t = 0;

    float dt = 0.0166667f;

    array2d<vec3> x(1000, 2);
    array2d<float> R(1000, 2);

    std::ifstream infile;

    infile.open("../resources/x.txt");
    for(int i = 0; i < 1000; i++)
    {
        infile >> x(i, 0).x;
        infile >> x(i, 1).x;
        infile >> x(i, 0).y;
        infile >> x(i, 1).y;
        infile >> x(i, 0).z;
        infile >> x(i, 1).z;
    }
    infile.close();

    infile.open("../resources/R.txt");
    for(int i = 0; i < 1000; i++)
    {
        infile >> R(i, 0);
        infile >> R(i, 1);
    }
    infile.close();

    cv::imshow("MOOLAB", fbo_to_img(&output0));

    while (key != 27 && t < 1000)
    {
        vec3 gamepadstick_left = gamepad_get_stick(GAMEPAD_STICK_LEFT);
        vec3 gamepadstick_right = gamepad_get_stick(GAMEPAD_STICK_RIGHT);

        BeginDrawing();
        ClearBackground(RAYWHITE);

        output0.set(vec3(100.f, 100.f, 200.f), 100.f);

        camera.position = camera.position + 5.f * (quat(rad_to_deg(camera_controller.ang.x), vec3(0.f, 1.f, 0.f)) * (-gamepadstick_left)) * dt;
        camera_controller.dir_gamepad_control(gamepadstick_right, 0.1f);
        camera.update_orientation(vec3(0.f, 1.f, 0.f));

        renderer.models[0]->transform = mat4(eye3(), renderer.point_lights[0]->light_position) * mat4(0.01f);
        renderer.models[1]->transform = mat4(eye3(), x(t, 0)) * mat4(Rodrigues(R(t, 0), vec3(0.f, 0.f, 1.f)), vec3()) * mat4(1.f, 0.1f, 0.1f);
        renderer.models[2]->transform = mat4(eye3(), x(t, 1)) * mat4(Rodrigues(R(t, 1), vec3(0.f, 0.f, 1.f)), vec3()) * mat4(1.f, 0.1f, 0.1f);

        std::cout << length(x(t, 0) + Rodrigues(R(t, 0), vec3(0.f, 0.f, 1.f)) * vec3(1.f, 0.f, 0.f) - 
                            x(t, 1) - Rodrigues(R(t, 1), vec3(0.f, 0.f, 1.f)) * vec3(-1.f, 0.f, 0.f)) << std::endl;;

        draw(renderer.models[0], camera, &output0, &par, true);
        draw(renderer.models[1], camera, &output0, &par, true);
        draw(renderer.models[2], camera, &output0, &par, true);

        cv::imshow("MOOLAB", fbo_to_img(&output0));

        std::cout << " Time: " << t << " Frame: " << frame_num 
                  << std::endl;
        frame_num++;
        t++;
        key = cv::waitKey(1);
        EndDrawing();
    }

    CloseWindow();

    return 0;
}
